// src/services/appointmentService.ts

export interface Appointment {
  appointmentId: string;
  appointmentDate: string;
  appointmentTime: string;
  doctorName: string | null;
  doctorId: string | null;
  appointmentRoom: string;
  specialty: string;
  appointmentStatus: string;
  appointmentNote: string;
  patientId: string;
  createdAt: string;
  updateAt: string;
}

// Khi t·∫°o l·ªãch m·ªõi
export interface NewAppointment {
  patientId: string; // üîπ b·∫Øt bu·ªôc g·ª≠i patientId
  appointmentDate: string;
  appointmentTime: string;
  appointmentRoom: string;
  specialty: string;
  appointmentNote: string;
}

const API_URL = "http://localhost:8080/appointments"; 
// ‚ö†Ô∏è Android Emulator: 10.0.2.2, thi·∫øt b·ªã th·∫≠t thay b·∫±ng IP m√°y backend

// L·∫•y danh s√°ch l·ªãch kh√°m theo patientId
export async function getAppointmentsByPatient(patientId: string): Promise<Appointment[]> {
  const res = await fetch(`${API_URL}/${patientId}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!res.ok) {
    throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch kh√°m c·ªßa b·ªánh nh√¢n");
  }

  const data = await res.json();
  return data as Appointment[];
}

// L·∫•y chi ti·∫øt l·ªãch kh√°m theo appointmentId
export async function getAppointmentById(appointmentId: string): Promise<Appointment> {
  const res = await fetch(`${API_URL}/detail/${appointmentId}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!res.ok) {
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i l·ªãch kh√°m ID=${appointmentId}`);
  }

  return res.json() as Promise<Appointment>;
}

// T·∫°o l·ªãch kh√°m m·ªõi
export async function createAppointment(data: NewAppointment): Promise<Appointment> {
  const res = await fetch(API_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });

  if (!res.ok) {
    throw new Error("Kh√¥ng th·ªÉ t·∫°o l·ªãch kh√°m m·ªõi");
  }

  return res.json() as Promise<Appointment>;
}
